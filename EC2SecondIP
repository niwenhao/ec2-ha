#!/bin/sh

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
. ${OCF_FUNCTIONS_DIR}/findif.sh

#######################################################################

SELF_INST_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
CURR_INST_ID=""
SELF_NIC_ID=""
CURR_NIC_ID=""
BASE_DIR="/tmp/EC2SecondIP"
mkdir -p $BASE_DIR
CURR_DESC_FILE="${BASE_DIR}/instance-describe-${OCF_RESKEY_vip}.json"
SELF_DESC_FILE="${BASE_DIR}/instance-describe-${SELF_INST_ID}.json"

#######################################################################
# Common functions

describe_with_nicip() {
	IP=$1
	FILE=$2
	ocf_log debug "Describe instance assigned the ip(${IP})"
	/usr/bin/aws ec2 describe-instances --filter "Name=network-interface.addresses.private-ip-address,Values=${IP}" > $FILE
	return $?
}

describe_with_instid() {
	INSTID=$1
	FILE=$2
	ocf_log debug "Describe instance with instance id($INSTID)"
	/usr/bin/aws ec2 describe-instances --instance-ids ${INSTID} > $FILE 2>/dev/null
	return $?
}

find_instid() {
	DESC_FILE=$1
	ocf_log debug "Take instance id from describe json file($DESC_FILE)"
	CONT=$(ruby -e 'require "json"; \
					print JSON.load(STDIN)["Reservations"][0]["Instances"][0]["InstanceId"]' < ${DESC_FILE})
	if [ $? -ne 0 ]; then
		return 100
	fi
	echo $CONT
}

find_nicid() {
	DESC_FILE=$1
	ocf_log debug "Take nic id from describe json file($DESC_FILE)"
	CONT=$(ruby -e 'require "json"; \
					print JSON.load(STDIN)["Reservations"][0]["Instances"][0]["NetworkInterfaces"][0]["NetworkInterfaceId"]' < ${DESC_FILE})
	if [ $? -ne 0 ]; then
		return 100
	fi
	echo $CONT
}

unassign_ip_from_nic() {
	NIC=$1
	IP=$2
	ocf_log debug "Unassign $IP from $NIC"
	/usr/bin/aws ec2 unassign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP
	return $?
}

assign_ip_to_nic() {
	NIC=$1
	IP=$2
	ocf_log debug "Assign $IP from $NIC"
	/usr/bin/aws ec2 assign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP
	return $?
}

is_ip_assigned() {
	FILE=$2
	
	ruby -e 'require "json"; \
			 privateIps = JSON.load(STDIN)["Reservations"][0][["Instances"][0]["NetworkInterfaces"]; \
			 privateIps.each { |ip| print "#{ip["PrivateIpAddress"]} " }'
}

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="EC2SecondIP">
<version>1.0</version>

<longdesc lang="en">
This agent while switch sencond ip to this instance
</longdesc>

<shortdesc lang="en">Sencond IP address HA</shortdesc>

<parameters>
<parameter name="vip" unique="1" required="1">
<longdesc lang="en">
The IPv4 (dotted quad notation) or IPv6 address (colon hexadecimal notation)
example IPv4 "192.168.1.1".
example IPv6 "2001:db8:DC28:0:0:FC57:D4C8:1FFF".
</longdesc>
<shortdesc lang="en">IPv4 or IPv6 address</shortdesc>
<content type="string" default="" />
</parameter>
<parameter name="netmask">
<longdesc lang="en">
The netmask for the interface in CIDR format
(e.g., 24 and not 255.255.255.0)

If unspecified, the script will also try to determine this from the
routing table.
</longdesc>
<shortdesc lang="en">CIDR netmask</shortdesc>
<content type="string" default=""/>
</parameter>

</parameters>
<actions>
<action name="start"   timeout="20s" />
<action name="stop"    timeout="20s" />
<action name="status" depth="0"  timeout="20s" interval="10s" />
<action name="monitor" depth="0"  timeout="20s" interval="10s" />
<action name="meta-data"  timeout="5s" />
<action name="validate-all"  timeout="20s" />
</actions>
</resource-agent>
END

	exit $OCF_SUCCESS
}

ip_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

ip_start() {
	ocf_log info "Try to startup httpd"
	ocf_log debug "Find instance id assigned ip(${OCF_RESKEY_vip})"
	describe_with_nicip ${OCF_RESKEY_vip} ${CURR_DESC_FILE}
	if [ $? -ne 0 ]; then
		exit $OCF_ERR_CONFIGURED
	fi
	CURR_INST_ID=$(find_instid $CURR_DESC_FILE)
	if [ $? -eq 0 ]; then
		if [ "$CURR_INST_ID" != "$SELF_INST_ID" ]; then
			ocf_log debug "Unassign ip(${OCF_RESKEY_vip})"
			CURR_NIC_ID=$(find_nicid $CURR_DESC_FILE)
			if [ $? -ne 0 ]; then
				exit $OCF_ERR_CONFIGURED
			fi
			unassign_ip_from_nic $CURR_NIC_ID ${OCF_RESKEY_vip}
			ocf_log debug "Assign ip(${OCF_RESKEY_vip}) to me"
			describe_instance_withid ${SELF_INST_ID} ${SELF_DESC_FILE}
			if [ $? -ne 0 ]; then
				exit $OCF_ERR_CONFIGURED
			fi
			SELF_NIC_ID=$(find_nicid $SELF_DESC_FILE)
			if [ $? -ne 0 ]; then
				exit $OCF_ERR_CONFIGURED
			fi
			assign_ip_to_nic $SELF_NIC_ID ${OCF_RESKEY_vip}
			if [ $? -ne 0 ]; then
				exit $OCF_ERR_CONFIGURED
			fi
		fi
	else
		describe_instance_withid ${SELF_INST_ID} ${SELF_DESC_FILE}
		if [ $? -ne 0 ]; then
			exit $OCF_ERR_CONFIGURED
		fi
		SELF_NIC_ID=$(find_nicid $SELF_DESC_FILE)
		if [ $? -ne 0 ]; then
			exit $OCF_ERR_CONFIGURED
		fi
		assign_ip_to_nic $SELF_NIC_ID ${OCF_RESKEY_vip}
		if [ $? -ne 0 ]; then
			exit $OCF_ERR_CONFIGURED
		fi
	fi
	
	exit $OCF_SUCCESS
}

ip_stop() {
	ocf_log info "Try to stop httpd"
	ocf_log debug "Describe instance with ip(${OCF_RESKEY_vip})"
	describe_with_nicip ${OCF_RESKEY_vip} ${CURR_DESC_FILE}
	if [ $? -ne 0 ]; then
		exit $OCF_ERR_CONFIGURED
	fi
	instid=$(find_instid $CURR_DESC_FILE)
	if [ $? -eq 0 ]; then
		if [ "$instid" == "$SELF_INST_ID" ]; then
			ocf_log debug "Unassign ip (${OCF_RESKEY_vip})"
			nicid=$(find_nicid ${CURR_DESC_FILE})
			if [ $? -ne 0 ]; then
				exit $OCF_ERR_CONFIGURED
			fi
			unassign_ip_from_nic $nicid ${OCF_RESKEY_vip}
		fi
	fi
	exit $OCF_SUCCESS
}

ip_monitor() {
	ocf_log info "Try to monitor httpd"

	curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -1)local-ipv4s | grep ${OCF_RESKEY_vip} > /dev/null
	if [ $? -eq 0 ]; then
		exit $OCF_SUCCESS
	else
		exit $OCF_NOT_RUNNING
	fi
}


ip_validate() {
	ocf_log info "Try to validate httpd"
	exit $OCF_SUCCESS
}

case $__OCF_ACTION in
meta-data)	meta_data
		;;
usage|help)	ip_usage
		exit $OCF_SUCCESS
		;;
start)		ip_start
		;;
stop)		ip_stop
		;;
status)		ip_monitor
		;;
monitor)	ip_monitor
		;;
validate-all)   ip_validate
		;;
*)		ip_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
# vi:sw=4:ts=8:
