#!/bin/sh

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
. ${OCF_FUNCTIONS_DIR}/findif.sh

#######################################################################

SELF_MAC=$(ip link show dev eth0 | tail -1 | awk '{ print $2; }')
SELF_INST_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)
CURR_INST_ID=""
SELF_NIC_ID=$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${SELF_MAC}/interface-id)
CURR_NIC_ID=""
BASE_DIR="/tmp/EC2SecondIP"
mkdir -p $BASE_DIR
CURR_DESC_FILE="${BASE_DIR}/instance-describe-${OCF_RESKEY_vip}.json"
SELF_DESC_FILE="${BASE_DIR}/instance-describe-${SELF_INST_ID}.json"

#######################################################################
# Common functions

describe_with_nicip() {
	IP=$1
	FILE=$2
	ocf_log debug "Describe instance assigned the ip(${IP})"
	ocf_log debug "/usr/bin/aws ec2 describe-instances --filter Name=network-interface.addresses.private-ip-address,Values=${IP} > $FILE"
	/usr/bin/aws ec2 describe-instances --filter "Name=network-interface.addresses.private-ip-address,Values=${IP}" > $FILE
	return $?
}

describe_with_instid() {
	INSTID=$1
	FILE=$2
	ocf_log debug "Describe instance with instance id($INSTID)"
	ocf_log debug "/usr/bin/aws ec2 describe-instances --instance-ids ${INSTID} > $FILE"
	/usr/bin/aws ec2 describe-instances --instance-ids ${INSTID} > $FILE 2>/dev/null
	return $?
}

find_instid() {
	DESC_FILE=$1
	ocf_log debug "Take instance id from describe json file($DESC_FILE)"
	CONT=$(ruby -e 'require "json"; \
					print JSON.load(STDIN)["Reservations"][0]["Instances"][0]["InstanceId"]' < ${DESC_FILE})
	if [ $? -ne 0 ]; then
		return 100
	fi
	echo $CONT
}

find_nicid() {
	DESC_FILE=$1
	ocf_log debug "Take nic id from describe json file($DESC_FILE)"
	CONT=$(ruby -e 'require "json"; \
					print JSON.load(STDIN)["Reservations"][0]["Instances"][0]["NetworkInterfaces"][0]["NetworkInterfaceId"]' < ${DESC_FILE})
	if [ $? -ne 0 ]; then
		return 100
	fi
	echo $CONT
}

unassign_ip_from_nic() {
	NIC=$1
	IP=$2
	ocf_log debug "Unassign $IP from $NIC"
	ocf_log debug "execute: /usr/bin/aws ec2 unassign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP"
	/usr/bin/aws ec2 unassign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP
	echo "sleep ${OCF_RESKEY_awsdelay}"
	sleep ${OCF_RESKEY_awsdelay}
	return $?
}

assign_ip_to_nic() {
	NIC=$1
	IP=$2
	ocf_log debug "Assign $IP to $NIC"
	ocf_log debug "/usr/bin/aws ec2 assign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP"
	/usr/bin/aws ec2 assign-private-ip-addresses --network-interface-id $NIC --private-ip-addresses $IP
	echo "sleep ${OCF_RESKEY_awsdelay}"
	sleep ${OCF_RESKEY_awsdelay}
	return $?
}

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="EC2SolrFO">
<version>1.0</version>

<longdesc lang="en">
This agent while switch sencond ip to this instance
</longdesc>

<shortdesc lang="en">Sencond IP address HA</shortdesc>

<parameters>
<parameter name="vip" unique="1" required="1">
<longdesc lang="en">
The IPv4 (dotted quad notation) or IPv6 address (colon hexadecimal notation)
example IPv4 "192.168.1.1".
example IPv6 "2001:db8:DC28:0:0:FC57:D4C8:1FFF".
</longdesc>
<shortdesc lang="en">IPv4 or IPv6 address</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="mask" required="1">
<longdesc lang="en">
The netmask to use ip addr add
</longdesc>
<shortdesc lang="en">mask</shortdesc>
<content type="string" default="24" />
</parameter>

<parameter name="awsdelay" required="1">
<longdesc lang="en">
The delay to effect after perform a aws api call.
The next operation will occures after the time.
</longdesc>
<shortdesc lang="en">aws api delay</shortdesc>
<content type="string" default="5"/>
</parameter>

<parameter name="solruser" required="1">
<longdesc lang="en">
solr startup user
</longdesc>
<shortdesc lang="en">soluser</shortdesc>
<content type="string" default="solr"/>
</parameter>

<parameter name="solrcommand" required="1">
<longdesc lang="en">
solr startup command
</longdesc>
<shortdesc lang="en">solrcommand</shortdesc>
<content type="string" default="start-mm-solr.sh"/>
</parameter>

</parameters>
<actions>
<action name="start"   timeout="20s" />
<action name="stop"    timeout="20s" />
<action name="status" depth="0"  timeout="20s" interval="10s" />
<action name="monitor" depth="0"  timeout="20s" interval="10s" />
<action name="meta-data"  timeout="5s" />
<action name="validate-all"  timeout="20s" />
</actions>
</resource-agent>
END

	exit $OCF_SUCCESS
}

ip_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

ip_start() {
	ocf_log info "Try to start"
	ocf_log debug "Find instance id assigned ip(${OCF_RESKEY_vip})"
	describe_with_nicip ${OCF_RESKEY_vip} ${CURR_DESC_FILE}
	if [ $? -ne 0 ]; then
		exit $OCF_ERR_CONFIGURED
	fi
	CURR_INST_ID=$(find_instid $CURR_DESC_FILE)
	if [ $? -eq 0 ]; then
		if [ "$CURR_INST_ID" != "$SELF_INST_ID" ]; then
			ocf_log debug "Unassign ip(${OCF_RESKEY_vip})"
			CURR_NIC_ID=$(find_nicid $CURR_DESC_FILE)
			if [ $? -ne 0 ]; then
				ocf_log err "Failed to take Nic id which hold the VIP"
				exit $OCF_ERR_CONFIGURED
			fi
			unassign_ip_from_nic $CURR_NIC_ID ${OCF_RESKEY_vip}
			ocf_log debug "Assign ip(${OCF_RESKEY_vip}) to me"
			assign_ip_to_nic $SELF_NIC_ID ${OCF_RESKEY_vip}
			if [ $? -ne 0 ]; then
				ocf_log err "Failed to assign VIP to self instance"
				exit $OCF_ERR_CONFIGURED
			fi
		fi
	else
		assign_ip_to_nic $SELF_NIC_ID ${OCF_RESKEY_vip}
		if [ $? -ne 0 ]; then
			ocf_log err "Failed to assign VIP to self instance"
			exit $OCF_ERR_CONFIGURED
		fi
	fi

	ocf_log debug "Try to append the vip to eth0"
	ocf_log debug "ip addr list dev eth0 | grep ${OCF_RESKEY_vip}"
	ip addr list dev eth0 | grep " ${OCF_RESKEY_vip}/" > /dev/null
	if [ $? -ne 0 ]; then
		ocf_log debug "ip addr add ${OCF_RESKEY_vip}/${OCF_RESKEY_mask} dev eth0"
		ip addr add ${OCF_RESKEY_vip}/${OCF_RESKEY_mask} dev eth0
		if [ $? -ne 0 ]; then
			ocf_log err "Failed to add VIP alias to eth0"
			exit $OCF_ERR_CONFIGURED
		fi
	fi

	su - ${OCF_RESKEY_solruser} -c "${OCF_RESKEY_solrcommand}"

	sleep ${OCF_RESKEY_awsdelay}
	
        lsof -i | grep ':8983' > /dev/null
	if [ $? -ne 0 ]; then
		ocf_log err "Failed to find tomcat process"
		exit $OCF_ERR_INSTALLED
	fi
	
	exit $OCF_SUCCESS
}

ip_stop() {
	ocf_log info "Try to stop"
	ocf_log debug "Describe instance with ip(${OCF_RESKEY_vip})"
	describe_with_nicip ${OCF_RESKEY_vip} ${CURR_DESC_FILE}
	if [ $? -ne 0 ]; then
		ocf_log err "Failed to describe instance which held the VIP"
		exit $OCF_ERR_CONFIGURED
	fi
	instid=$(find_instid $CURR_DESC_FILE)
	if [ $? -eq 0 ]; then
		if [ "$instid" == "$SELF_INST_ID" ]; then
			ocf_log debug "Unassign ip (${OCF_RESKEY_vip})"
			nicid=$(find_nicid ${CURR_DESC_FILE})
			if [ $? -ne 0 ]; then
				ocf_log err "Failed to take Nic id which hold the VIP"
				exit $OCF_ERR_CONFIGURED
			fi
			unassign_ip_from_nic $nicid ${OCF_RESKEY_vip}
		fi
	fi

	ocf_log debug "Try to remove the vip from eth0"
	ocf_log debug "ip addr list dev eth0 | grep ${OCF_RESKEY_vip}"
	ip addr list dev eth0 | grep " ${OCF_RESKEY_vip}/" > /dev/null
	if [ $? -eq 0 ]; then
		ocf_log debug "ip addr del ${OCF_RESKEY_vip}/${OCF_RESKEY_mask} dev eth0"
		ip addr del ${OCF_RESKEY_vip}/${OCF_RESKEY_mask} dev eth0
		if [ $? -ne 0 ]; then
			ocf_log err "Failed to remove VIP alias to eth0"
			exit $OCF_ERR_CONFIGURED
		fi
	fi
	exit $OCF_SUCCESS
}

ip_monitor() {
	ocf_log info "Try to monitor"

	nicid=$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/ 2>/dev/null | head -1)
	ocf_log debug "Monitor nic id -> ($nicid)"

	curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${nicid}local-ipv4s 2>/dev/null | grep ${OCF_RESKEY_vip} > /dev/null
	if [ $? -ne 0 ]; then
		ocf_log err "Failed because have not held VIP"
		exit $OCF_NOT_RUNNING
	fi

	curl http://${OCF_RESKEY_vip}:8983/solr/ > /dev/null
	if [ $? -ne 0 ]; then
		ocf_log err "Failed because cann't access solr via VIP"
		exit $OCF_NOT_RUNNING
	fi
	exit $OCF_SUCCESS
}


ip_validate() {
	ocf_log info "Try to validate"
	exit $OCF_SUCCESS
}

case $__OCF_ACTION in
meta-data)	meta_data
		;;
usage|help)	ip_usage
		exit $OCF_SUCCESS
		;;
start)		ip_start
		;;
stop)		ip_stop
		;;
status)		ip_monitor
		;;
monitor)	ip_monitor
		;;
validate-all)   ip_validate
		;;
*)		ip_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
# vi:sw=4:ts=8:
